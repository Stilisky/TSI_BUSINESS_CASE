{
    "openapi": "3.0.1",
    "info": {
        "version": "1.0.0",
        "title": "API de TSI BUSINESS CASE",
        "description": "TSI, an sports platform",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "http://localhost:5000/api/v1",
            "description": "Local Development Server"
        },
        {
            "url": "http://localhost:5000/api/v1",
            "description": "Prod Development Server"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "User authentication and authorization for admin and user"
        },
        {
            "name": "Users",
            "description": "User management"
        },
        {
            "name": "Players",
            "description": "Player management"
        },
        {
            "name": "Matchs",
            "description": "Matchs management"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "New user registration",
                "parameters": [],
                "requestBody": {
                    "description": "Request Body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "username": "newuser",
                                "email": "newuser@mail.com",
                                "password": "password",
                                "confirm_password": "password"
                              },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succ√®s",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d031804469a8be17bfa8",
                                    "username": "newuser",
                                    "email": "newuser@mail.com",
                                    "role": "USER",
                                    "__v": 0
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad parameters in request body",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Cannot create user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "description": "Generate a user token",
                "parameters": [],
                "requestBody": {
                    "description": "Request Body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "email" : "newuser@mail.com",
                                "password" : "your_password"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWUyMDUyMDA3YjkyNDU4NWVkYmNlNiIsImlhdCI6MTY5Mzk2MTQ0OSwiZXhwIjoxNjk2NTUzNDQ5fQ.l3B2rMSs6DZ9b5T2cO5Kmg9cCmnrCQx83aSnluq0O0I"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If email or username is incorrect",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Email Or Password"
                                }
                            }
                        }
                    }
                }
            }
        },


        "/auth/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "summary": "Get All users",
                "description": "All users informations",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d031804469a8be17bfa8",
                                    "username": "newuser",
                                    "email": "newuser@mail.com",
                                    "role": "USER",
                                    "__v": 0
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/users/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "summary": "Get user",
                "description": "Get a user account information",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d031804469a8be17bfa8",
                                    "username": "newuser",
                                    "email": "newuser@mail.com",
                                    "role": "USER",
                                    "__v": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If id not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User doesn't exist"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request Body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "username": "Lomoki",
                                "email": "lomoki@mail.com"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {  
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d031804469a8be17bfa8",
                                    "username": "Lomoki",
                                    "email": "lomoki@mail.com",
                                    "role": "USER",
                                    "__v": 0
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "400": {
                        "description": "If id not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User doesn't exist"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User successfully deleted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If id not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User doesn't exist"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }
                }
            }
        },

        
        "/players": {
            "get": {
                "tags": [
                    "Players"
                ],
                "summary": "Get all players",
                "description": "Return all players",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "_id": "6563d76e10ec675493c2288d",
                                    "playerName": "LeBron James",
                                    "jerseyNumber": 6,
                                    "position": "CENTER",
                                    "image": "player.jpg",
                                    "performance": [
                                        {
                                            "_id": "656411c713d9183dd2641985",
                                            "opposingTeam": "Atlanta",
                                            "pointsScored": 75,
                                            "numberAssists": 60,
                                            "numberIntercepts": 45,
                                            "numberShotsBlocked": 18,
                                            "shotSuccess": 89,
                                            "created_at": "2023-11-27T03:45:17.477Z",
                                            "__v": 0,
                                            "player": "6563d76e10ec675493c2288d"
                                        }
                                    ],
                                    "__v": 0
                                },
                                "$ref": "#/components/schemas/Player"
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid Server Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Server"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Players"
                ],
                "summary": "Create a player",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Route to create a player",
                "parameters": [],
                "requestBody": {
                    "description": "Request Body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "playerName": "Deandre Ayton",
                                "jerseyNumber": 1,
                                "position": "SHOOTING GUARD"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Player"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d76e10ec675493c2288d",
                                    "playerName": "Deandre Ayton",
                                    "jerseyNumber": 1,
                                    "position": "SHOOTING GUARD",
                                    "image": "player.jpg",
                                    "__v": 0
                                },
                                "$ref": "#/components/schemas/Player"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if body is not correct",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Data"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }                    
                }
            }
        },
        "/players/{playerId}": {
            "get": {
                "tags": [
                    "Players"
                ],
                "summary": "Get a player informations",
                "description": "Return a player info by id",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d76e10ec675493c2288d",
                                    "playerName": "Deandre Ayton",
                                    "jerseyNumber": 1,
                                    "position": "SHOOTING GUARD",
                                    "image": "player.jpg",
                                    "__v": 0
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the id is not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User doesn't exist"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Players"
                ],
                "summary": "Update a player informations",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request Body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "playerName": "Deandre Ayton",
                                    "jerseyNumber": 1,
                                    "position": "SHOOTING GUARD"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Player"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succ√®s",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6563d76e10ec675493c2288d",
                                    "playerName": "Deandre Ayton",
                                    "jerseyNumber": 1,
                                    "position": "SHOOTING GUARD",
                                    "image": "player.jpg",
                                    "__v": 0
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Player"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If player not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "When user is not authorized to do this action",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not authorized"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Players"
                ],
                "summary": "Delete a player",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a player by its ID by admin",
                "parameters": [
                    {
                        "name": "playerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Player successfully deleted"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Player"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If player not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "When user is not authorized to do this action",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not authorized"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/games": {
            "get": {
                "tags": [
                    "Matchs"
                ],
                "summary": "Get a matchs informations",
                "description": "Return all matchs",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "6564104e46b7325be0fec84d",
                                    "opposingTeam": "Equipe A",
                                    "pointsScored": 115,
                                    "numberAssists": 75,
                                    "numberIntercepts": 20,
                                    "numberShotsBlocked": 14,
                                    "shotSuccess": 80,
                                    "created_at": "2023-11-27T03:37:59.347Z",
                                    "__v": 0
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the token is incorrect",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Token"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "description": "(UNIQUE) : Nom de l'utilisateur",
                            "minLength": 4
                        },
                        "email": {
                            "type": "string",
                            "format": "email",
                            "pattern": "^[a-z0-9._-]+@[a-z0-9._-]{2,}\\.[a-z]{2,10}$",
                            "description": "(UNIQUE) : Adresse e-mail de l'utilisateur"
                        },
                        "password": {
                            "type": "string",
                            "minLength": 8,
                            "description": "Mot de passe de l'utilisateur"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "user"
                            ],
                            "default": "user",
                            "description": "Type de l'utilisateur"
                        },
                        "isStudent": {
                            "type": "string",
                            "enum": [
                                "yes",
                                "no"
                            ],
                            "default": "yes",
                            "description": "Si l'utilisateur est un √©tudiant ou un professionnel"
                        },
                        "school": {
                            "type": "string",
                            "default": null,
                            "$ref": "#/components/schemas/School",                        
                            "description": "Ecole si √©tudiant (NB: Envoyez jsute le nom de l'√©cole, pas l'id)",
                            "example": "EPITECH B√©nin"
                        },
                        "country": {
                            "type": "string",
                            "description": "Pays",
                            "example": "B√©nin"
                        },
                        "enable": {
                            "type": "string",
                            "enum": ["enabled", "disabled"],
                            "default": "enabled",
                            "description": "Statut de l'utilisateur: compte activ√© ou d√©sactiv√© ?"
                        },
                        "active": {
                            "type": "string",
                            "enum": ["yes", "no"],
                            "default": "no",
                            "description": "V√©rification du mail de l'utilisateur"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource",
                            "example": "timestamp"
                        }
                    }
                },
                "required": ["name", "email", "password", "country", "isStudent"]
            },
            "School": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "description": "(UNIQUE) : Nom de l'√©cole",
                            "example":"EPITECH B√©nin"
                        },
                        "picture": {
                            "type": "string",
                            "default": null,
                            "description": "(PAS PRIS EN COMPTE POUR LE MOMENT) : Image de la ressource"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name"]
            },        
            "Category": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Web exploitation",
                            "description": "(UNIQUE) : Nom de la cat√©gorie"
                        },
                        "description": {
                            "type": "string",
                            "default": null,
                            "description": "Description de la category"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name"]
            },
            "Event": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"#H4CkTHeb0X",
                            "description": "(UNIQUE) : Nom de la cat√©gorie"
                        },
                        "description": {
                            "type": "string",
                            "description": "Description de l'event de CTF"
                        },
                        "isSolo": {
                            "type": "string",
                            "description": "Nom de la cat√©gorie",
                            "enum": ["solo", "team"]
                        },
                        "minTeamSize": {
                            "type": "Number",
                            "default": 0,
                            "min":0,
                            "description": "Le nombre minimal de personne dans chaque √©quipe"
                        },
                        "maxTeamSize": {
                            "type": "Number",
                            "default": 0,
                            "min":0,
                            "description": "Le nombre maximal de personne dans chaque √©quipe"
                        },
                        "scope": {
                            "type": "string",
                            "description": "Nom de la cat√©gorie",
                            "enum": [
                                "national",
                                "international",
                                "special EPITECH",
                                "interschool",
                                "open"
                            ],
                            "default": "open"
                        },
                        "startDate": {
                            "type": "Date",
                            "min": "Date.now()",
                            "description": "Le nombre maximal de personne dans chaque √©quipe"
                        },
                        "endDate": {
                            "type": "Date",
                            "min": "Date.now()",
                            "description": "Le nombre maximal de personne dans chaque √©quipe"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name", "description", "isSolo", "startDate", "endDate"]
            },
            "Challenge": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Find the flag",
                            "description": "Nom du challenge"
                        },
                        "description": {
                            "type": "string",
                            "description": "Description du challenge"
                        },
                        "max_attempts": {
                            "type": "Number",
                            "example": 5,
                            "default": 0,
                            "min": 0,
                            "description": "Nombre maximal de tentative d'un challenge"
                        },
                        "value": {
                            "type": "Number",
                            "example": 120,
                            "min": 0,
                            "description": "Point que ram√®ne un challenge"
                        },
                        "category": {
                            "type": "string",
                            "$ref": "#/components/schemas/Category",
                            "description": "(Envoyer l'ID) Category du challenge"
                        },
                        "type": {
                            "type": "string",
                            "description": "Type du challenge",
                            "enum": ["standard", "dynamic"],
                            "default": "standard"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "(Id de l'event) Event auquel appartient le challenge; null s'il n'est dans aucun event"
                        },
                        "requirements": {
                            "type": "array",
                            "example":"Find the flag",
                            "description": "Tableau d'id des challenges a r√©soudre avant de d√©bloquer celui-ci"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": [
                    "name",
                    "description",
                    "value",
                    "category",
                    "type"
                ]
            },
            "Team": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Excelsior",
                            "description": "Nom de la team"
                        },
                        "picture": {
                            "type": "string",
                            "default": null,
                            "description": "(PAS PRIS EN COMPTE POUR LE MOMENT) : Image de la ressource"
                        },
                        "captain": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Capitaine de l'√©quipe (par d√©faut le cr√©ateur de l'√©quipe sauf si c'est l'admin qui le cr√©e, auquel cas, il doit fournir le capitaine)"
                        },
                        "users": {
                            "type": "array",
                            "default": null,
                            "$ref": "#/components/schemas/User",
                            "description": "Tableau d'ids des users qui sont dans l'√©quipe"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "Ev√®nement pour lequel l'√©quipe a √©t√© cr√©√©e"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name", "captain", "event"]
            },
            "Submission": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "challenge": {
                            "type": "string",
                            "$ref": "#/components/schemas/Challenge",
                            "description": "Le challenge pour lequel la soumission a √©t√© faite"
                        },
                        "user": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Auteur de la soumission"
                        },
                        "team": {
                            "type": "string",
                            "$ref": "#/components/schemas/Team",
                            "default": null,
                            "description": "Team de l'auteur de la soumission, si le challenge est en √©quipe"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "Event du challenge, si le challenge est dans un event"
                        },
                        "writeUp": {
                            "type": "string",
                            "description": "writeUp qui a √©t√© fourni durant soumission"
                        },
                        "isCorrect": {
                            "type": "string",
                            "description": "D√©termine si le flag envoy√© est correct ou pas",
                            "enum": ["incorrect", "correct"],
                            "default": "incorrect"
                        },
                        "isValidate": {
                            "type": "string",
                            "description": "D√©termine si le flag correct envoy√© a √©t√© valid√© par l'admin ou pas",
                            "enum": ["pending", "validated", "refused"],
                            "default": "pending"
                        },
                        "adminComments": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Auteur de la soumission"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["challenge", "user", "writeUp"]
            },
            "Notification": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-g√©n√©r√© par mongoose"
                        },
                        "title": {
                            "type": "string",
                            "example":"Un nouvel event est lanc√©",
                            "description": "Notif content"
                        },
                        "content": {
                            "type": "string",
                            "example":"Allez vous inscrire",
                            "description": "Notif content"
                        },
                        "viewers": {
                            "type": "array",
                            "default": [],
                            "description": "Content ids of those who see it"
                        }
                    }
                },
                "required": ["title", "content"]
            }
        },
        "securitySchemes": {
            "JWTBearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Token de connexion obtenu apr√®s la connexion"
            }
        }        
    }
}