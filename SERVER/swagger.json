{
    "openapi": "3.0.1",
    "info": {
        "version": "1.0.0",
        "title": "API de TSI BUSINESS CASE",
        "description": "TSI, an sports platform",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "http://localhost:5000/api",
            "description": "Local Development Server"
        },
        {
            "url": "http://localhost:5000/api",
            "description": "Prod Development Server"
        }
    ],
    "tags": [
        {
            "name": "Login",
            "description": "Register and Authentification endpoints"
        },
        {
            "name": "Players",
            "description": "Players endpoints"
        },
        {
            "name": "Performances",
            "description": "Performances endpoints"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/users/new-admin": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register a new admin",
                "description": "New admin registration",
                "parameters": [],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name": "Zoulkifle",
                                "email": "zoulkifle1.salifou@epitech.eu",
                                "password": "passwordSolid",
                                "confirm_password": "passwordSolid"
                              },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden ! An admin already exist, this route is useless",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Cannot create admin"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Login",
                "description": "Generate a user token",
                "parameters": [],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Boconon",
                                "email" : "zoulkifle.salifou@epitech.eu"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled",
                                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWUyMDUyMDA3YjkyNDU4NWVkYmNlNiIsImlhdCI6MTY5Mzk2MTQ0OSwiZXhwIjoxNjk2NTUzNDQ5fQ.l3B2rMSs6DZ9b5T2cO5Kmg9cCmnrCQx83aSnluq0O0I"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If email or username is incorrect",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Email Or Password"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/confirm/{key}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Verify a email address",
                "description": "Ask key by email to user in order to activate his account",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès : Compte activé",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee0c9c8d454f077f6f6d5e",
                                    "name": "Zoulkifle",
                                    "email": "zoulkifle1.salifou@epitech.eu",
                                    "isStudent": "no",
                                    "school": null,
                                    "country": "Bénin",
                                    "type": "admin",
                                    "enable": "enabled"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/forget": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Request a account password recovery",
                "description": "If wanna reset a user account",
                "parameters": [],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "email" : "zoulkifle.salifou@epitech.eu"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Mail sended"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If email not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/reset/{key}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Reset password",
                "description": "Verify key sent by email to user in order to activate his account",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès : Mot de passe réinitialisé et envoyer par mail",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee0c9c8d454f077f6f6d5e",
                                    "name": "Zoulkifle",
                                    "email": "zoulkifle1.salifou@epitech.eu",
                                    "isStudent": "no",
                                    "school": null,
                                    "country": "Bénin",
                                    "type": "admin",
                                    "enable": "enabled"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If token not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register by admin",
                "description": "Create account",
                "parameters": [],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Boconon",
                                "email" : "zoulkifle.salifou@epitech.eu",
                                "isStudent": "yes",
                                "country": "Bénin",
                                "school": "EPITECH Bénin",
                                "password" : "passwordSolid",
                                "confirm_password" : "passwordSolid"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64f7cc07326c572c2e9ff8dc",
                                    "name": "Zoul",
                                    "email": "zoul.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": {
                                        "_id": "64ee2052007b924585edbce4",
                                        "name": "EPITECH Bénin",
                                        "picture": null,
                                        "createdAt": "2023-08-29T16:44:02.926Z",
                                        "updatedAt": "2023-08-29T16:44:02.926Z",
                                        "__v": 0
                                    },
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If email or username is already taken",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User Already Exists"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "If a field is missing",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User validation failed:..."
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users by admin",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "To let admin get all users",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "users": [
                                        {"$ref": "#/components/schemas/User"},
                                        {"$ref": "#/components/schemas/User"}
                                    ],
                                    "currentRows": 13,
                                    "totalRows": 12563
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "search users by everyone",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "To search a users by using email and username",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "users": [
                                        {"$ref": "#/components/schemas/User"},
                                        {"$ref": "#/components/schemas/User"}
                                    ],
                                    "currentRows": 13,
                                    "totalRows": 12563
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If email not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Boconon",
                                "email" : "zoulkifle.salifou@epitech.eu",
                                "isStudent": "yes",
                                "country": "Bénin",
                                "school": "EPITECH Bénin"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If email not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If email not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a logged in profile",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update logged in user profiles by id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Boconon",
                                "email" : "zoulkifle.salifou@epitech.eu",
                                "isStudent": "yes",
                                "country": "Bénin",
                                "school": "EPITECH Bénin",
                                "new_password": "old password"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete my account",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a user account",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "user",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/admin": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Make/Unmake a user an admin by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Pour rendre quelqu'un admin ou le rendre simple user",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "admin",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If logged in user try to change his status",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You can't change your own status."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/enable": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Enable/Disable a user account by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Pour que l'admin puisse bloquer/débloquer un compte",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "admin",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/me/password": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "change a logged in account password",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Change his password and return his profile",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "country": "Bénin",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "admin",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "400": {
                        "description": "if Password given doesn't match",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Password doesn't match"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If old password given is incorrect",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Incorrect password"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/me/enable": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Enable/Disable a logged in account by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "admin",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "404": {
                        "description": "If user not found in users",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/excel": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Export users list to Excel",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a list of Users that you will format in Excel and download",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": [
                                    {"$ref": "#/components/schemas/User"},
                                    {"$ref": "#/components/schemas/User"}
                                ],
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                }
            }
        },
        "/users/import": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Make/Unmake a user an admin by giving his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a user profile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_id": "64ee2052007b924585edbce6",
                                    "name": "Boconon",
                                    "email": "zoulkifle.salifou@epitech.eu",
                                    "isStudent": "yes",
                                    "school": "64ee2052007b924585edbce4",
                                    "type": "admin",
                                    "enable": "enabled"
                                },
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if all users imported failed",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid User Data, Nothing imported"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get teams of event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return all teams of an event by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "teams": [
                                        { "$ref": "#/components/schemas/Team" },
                                        { "$ref": "#/components/schemas/Team" }
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 124
                                },
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    },
                    "404": {
                        "description": "When the event was not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Create a team for an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Route to create a team for an event by event id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name": "Excelsior"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if body is not correct",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Data"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get a teams informations",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a team info by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": [
                                    { "$ref":"#/components/schemas/Team" },
                                    { "$ref":"#/components/schemas/Team" }
                                ],
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the id is not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User Already Exists"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Modifier une équipe",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Pour update une équipe par un admin ou le captain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name": "Excelsior2.0"
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If team not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete a team",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a team by its ID by admin or captain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the id is not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "When user is not authorized to do this action",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not authorized"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}/leave": {
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "To leave a team",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "When logged in user want to leave a team by giving team id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the id is not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user is not authorized to do this action. Possible for admin or captain but only when event haven't started yet",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You're a captain. A captain can't leave his team !"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}/members": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get team members",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get all a team members",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "captain" : {"$ref":"#/components/schemas/User"},
                                    "users" : [
                                        {"$ref":"#/components/schemas/User"},
                                        {"$ref":"#/components/schemas/User"}
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If id not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}/new-member": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Add a member to a team",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Add a new member to a team by giving his email or username",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "member" : "Boconon"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If event have started",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You can't add a member to a team after the event start date!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If member account is not active or enabled",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "There is a problem with this account. User haven't verify his mail or is disabled by admin."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If member account not found in event challengers list.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This user is not registered to this event ! He must register to this event before."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "If member already have a team",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "This user already have a team for this event! He must leave it before."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}/remove-member/{member}": {
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete a member from a team",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Give team id and member username or email and he will be removed from the team",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "member",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }

                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If user is not admin or captain",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not authorized !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden : If user is not in the team",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User is not in this team."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If member or team not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/teams/{id}/captain/{member}": {
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Change a team captain",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Give team id and captain username or email",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "member",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }

                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If logged in user is not captain or admin",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not authorized !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When trying to change captain after end of event or if user is not in the team",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "User is not in this team ! Add he before."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If team or member not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Get challenges files",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return all challenges files",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "files": [
                                        {
                                            "_id":"64ee0c9c8d454f077f6f6d5e",
                                            "challenge":{
                                                "$ref":"#/components/schemas/Challenge"
                                            },
                                            "name": "12151516546161.jpg",
                                            "originalname": "screen hacker entrain de s'amuser sur BlueLock",
                                            "path": "uploads/12151516546161.jpg",
                                            "size": 123456,
                                            "mimetype": "image/jpeg",
                                            "timestamp": "09-09-2023 14:10:30.5151"
                                        },
                                        {
                                            "_id":"64ee0c9c8d454f077f6f6d5e",
                                            "challenge":{
                                                "$ref":"#/components/schemas/Challenge"
                                            },
                                            "name": "12151516546161.jpg",
                                            "originalname": "screen hacker entrain de s'amuser sur BlueLock",
                                            "path": "uploads/12151516546161.jpg",
                                            "size": 123456,
                                            "mimetype": "image/jpeg",
                                            "timestamp": "09-09-2023 14:10:30.5151"
                                        }
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 1351
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Get a files informations",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Give this files id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example":                                     {
                                    "_id":"64ee0c9c8d454f077f6f6d5e",
                                    "challenge":{
                                        "$ref":"#/components/schemas/Challenge"
                                    },
                                    "name": "12151516546161.jpg",
                                    "originalname": "screen hacker entrain de s'amuser sur BlueLock",
                                    "path": "uploads/12151516546161.jpg",
                                    "size": 123456,
                                    "mimetype": "image/jpeg",
                                    "timestamp": "09-09-2023 14:10:30.5151"
                                }

                            }
                        }
                    },
                    "404": {
                        "description": "If File not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Challenge file not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files/delete": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Delete files",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete many files from server",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "files": [
                                    "64ee0c9c8d454f077f6f6d5e",
                                    "64ee0c9c8d454f077f6f6d5e"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message":"files deleted"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return all categories",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "categories": [
                                        {"$ref":"#/components/schemas/Category"},
                                        {"$ref":"#/components/schemas/Category"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a category",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Create a new category",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Web Exploitation",
                                "description" : "Hack websites"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Category"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If data provided are not good",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Category Data"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "If category already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Category already exist"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a category by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/Team"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If category not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Change a category infos",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Web",
                                "description": "description of web challenges"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If category not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a category",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Team"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If category not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}/challenges": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category challenges without event challenges",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a category challenges by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "categories": [
                                        {"$ref":"#/components/schemas/Category"},
                                        {"$ref":"#/components/schemas/Category"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If category not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schools": {
            "get": {
                "tags": [
                    "Schools"
                ],
                "summary": "Get all Schools",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return all Schools",
                "parameters":  [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    

                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "schools": [
                                        {"$ref":"#/components/schemas/School"},
                                        {"$ref":"#/components/schemas/School"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 565
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/School"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Schools"
                ],
                "summary": "Create a school",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Create a new school",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Web Exploitation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/School"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/School"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "If School already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "School already exist"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schools/{id}": {
            "get": {
                "tags": [
                    "Schools"
                ],
                "summary": "Get a school",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a school by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/School"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/School"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If school not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Schools"
                ],
                "summary": "Update a School",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Change a School infos",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "name" : "Web"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/School"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/School"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If School not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Schools"
                ],
                "summary": "Delete a School",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete a School",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/School"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/School"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If School not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schools/{id}/members": {
            "get": {
                "tags": [
                    "Schools"
                ],
                "summary": "Get a School members",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a School members by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "users": [
                                        {
                                            "$ref":"#/components/schemas/User"
                                        },
                                        {
                                            "$ref":"#/components/schemas/User"
                                        }
                                    ],
                                    "currentRows": 15,
                                    "totalRows":300
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If School not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all events",
                "parameters": [
                    {
                        "name": "before",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "date"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "date"
                        }
                    },
                    {
                        "name": "mode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["solo", "team"]
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "national",
                                "international",
                                "special EPITECH",
                                "interschool",
                                "open"
                            ]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["going", "coming", "passed"]
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return all events",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "events": [
                                        {"$ref":"#/components/schemas/Event"},
                                        {"$ref":"#/components/schemas/Event"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Create a new event",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "isSolo": {
                                        "type": "string",
                                        "enum": ["solo", "team"]
                                    },
                                    "minTeamSize": {
                                        "type": "integer"
                                    },
                                    "maxTeamSize": {
                                        "type": "integer"
                                    },
                                    "scope": {
                                        "type": "string",
                                        "enum": [
                                            "national",
                                            "international",
                                            "special EPITECH",
                                            "interschool",
                                            "open"
                                        ]

                                    },
                                    "startDate": {
                                        "type": "date" 
                                    },
                                    "endDate": {
                                        "type": "date"
                                    }
                                },
                                "required": ["name", "description", "isSolo", "minTeamSize", "maxTeamSize", "scope", "startDate", "endDate"]
                            },
                            "example": {
                                "name" : "Mega Event",
                                "description" : "Bah ceci est un Mega event quoi",
                                "isSolo": "solo",
                                "minTeamSize": "0",
                                "maxTeamSize": "0",
                                "scope": "special EPITECH",
                                "startDate": "07-14-2020",
                                "endDate": "07-14-2023"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Category"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If data provided are not good",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Invalid Category Data"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "If category already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Category already exist"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get an event by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/Event"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If event not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Change an event infos",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "isSolo": {
                                        "type": "string",
                                        "enum": ["solo", "team"]
                                    },
                                    "minTeamSize": {
                                        "type": "integer"
                                    },
                                    "maxTeamSize": {
                                        "type": "integer"
                                    },
                                    "scope": {
                                        "type": "string",
                                        "enum": [
                                            "national",
                                            "international",
                                            "special EPITECH",
                                            "interschool",
                                            "open"
                                        ]

                                    },
                                    "startDate": {
                                        "type": "date" 
                                    },
                                    "endDate": {
                                        "type": "date"
                                    }
                                }
                            },
                            "example": {
                                "name" : "Mega Event",
                                "description" : "Bah ceci est un Mega event quoi",
                                "isSolo": "solo",
                                "minTeamSize": "0",
                                "maxTeamSize": "0",
                                "scope": "special EPITECH",
                                "startDate": "07-14-2020",
                                "endDate": "07-14-2023"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Event"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If event not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Delete an event",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Event"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If event not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/old/{id}/challenges": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all challenges of an old event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return all challenges of an old event",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "challenges": [
                                        {"$ref":"#/components/schemas/Challenge"},
                                        {"$ref":"#/components/schemas/Challenge"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/challenges": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all challenges of an event but only if registered or admin",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return all challenges of an event",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "challenges": [
                                        {"$ref":"#/components/schemas/Challenge"},
                                        {"$ref":"#/components/schemas/Challenge"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/challengers": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all challengers of an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return all users registered for an event",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "challenges": [
                                        {"$ref":"#/components/schemas/Challenge"},
                                        {"$ref":"#/components/schemas/Challenge"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When event hevn't be found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/invite": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get possible partner for creating a team for an event",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Get possible partner for a team",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "users": [
                                        {"$ref":"#/components/schemas/User"},
                                        {"$ref":"#/components/schemas/User"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If event have started",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You're late ! Time to register to this event is passed !"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If scope is EPITECH and EPITECH haven't be registered yet on this app",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "EPITECH is not already registered as school!"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/register": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Register to an event",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Register to a new event",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You have been registered to this event !"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If event scope does not allow logged in user",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You don't have the right to register to this event !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If event have started",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You can't register to an event that have already started !"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If event doesn't exist",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/unregister": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Unregister to an event",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Unregister to an event",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You have been unregistered from this event !"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If event have started",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You can't unregister from an event that already started !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If a captain wanna leave an event where his team have member",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Captain must be the last to leave a team ! You are the captain and you cannot leave a team that have members."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}/{category}/challenges": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category challenges without event challenges",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a category challenges by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "challenges": [
                                        {"$ref":"#/components/schemas/Challenge"},
                                        {"$ref":"#/components/schemas/Challenge"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 523
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If user is not registered",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You are not registered to the event of this challenge"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If event haven't started yet",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Event haven't started yet"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get readed notifications",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return readed notifications",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "notifications": [
                                        {"$ref":"#/components/schemas/Notification"},
                                        {"$ref":"#/components/schemas/Notification"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Create an notification",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Create a new notif",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string"
                                    },
                                    "content": {
                                        "type": "string"
                                    }
                                },
                                "required": ["title", "content"]
                            },
                            "example": {
                                "title" : "Mega Event commence",
                                "content" : "Bah ceci est un Mega event quoi"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Notification"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If data provided are not good",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Error while creating notification ! Check informations that you provided"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notifications/news": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get unreaded notifications",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "description": "Return unreaded notifications",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "notifications": [
                                        {"$ref":"#/components/schemas/Notification"},
                                        {"$ref":"#/components/schemas/Notification"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notifications/news/count": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get number of unreaded notifications",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return unreaded notifications number",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "count": 13
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions": {
            "get": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Get all Submission",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return all Submission",
                "parameters":  [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["pending", "validated", "refused"],
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    

                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "submission": [
                                        {"$ref":"#/components/schemas/Submission"},
                                        {"$ref":"#/components/schemas/Submission"}
                                    ],
                                    "currentRows": 15,
                                    "totalRows": 565
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions/{id}": {
            "get": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Get a submission",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a submissions by giving his id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/Submission"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If submissions not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Submit a flag",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "This root is to submit a flag for the challenge",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "flag" : "epitech",
                                "writeUp" : "J'ai juste écrit un write-up"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "flag": {
                                        "type": "string"
                                    },
                                    "writeUp": {
                                        "type": "string"
                                    }
                                },
                                "required": ["flag", "writeUp"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "succes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When a params is missing or invalid",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "fail"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "When not authorized",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You're not allowed to do this challenge because you're not registered on its event !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When forbidden",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You must be in a team before try this challenge because its event is in Team"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If Submission not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions/event/{id}": {
            "get": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Get event's submissions by using his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get all submissions of an event by giving event id",
                "parameters":  [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["pending", "validated", "refused"],
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    

                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {  
                                    "submissions": [
                                        {
                                            "$ref":"#/components/schemas/Submission"
                                        },
                                        {
                                            "$ref":"#/components/schemas/Submission"
                                        }
                                    ],
                                    "currentRows":13,
                                    "totalRows":523
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions/challenge/{id}": {
            "get": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Get challenge's submissions by using his id",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get all submissions of a challenge by giving challenge id",
                "parameters":  [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["pending", "validated", "refused"],
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }    
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {  
                                    "submissions": [
                                        {
                                            "$ref":"#/components/schemas/Submission"
                                        },
                                        {
                                            "$ref":"#/components/schemas/Submission"
                                        }
                                    ],
                                    "currentRows":13,
                                    "totalRows":523
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions/{id}/validate": {
            "put": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Validate a submission",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "This root is to validate a flag given by a user for the challenge by giving submission id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "comments" : "Good job, bien joué !"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "comments": {
                                        "type": "string"
                                    }
                                },
                                "required": ["comments"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/Submission"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When forbidden : trying to validate a false flag",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You can't validate this submission because the flag is incorrect !"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If Submission not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/submissions/{id}/reject": {
            "put": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Reject a submission",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "This root is to reject a flag given by a user for the challenge by giving submission id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "comments" : "T'as triché -42 :P !"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "comments": {
                                        "type": "string"
                                    }
                                },
                                "required": ["comments"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                        "$ref":"#/components/schemas/Submission"
                                    },
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If Submission not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Submission not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/challenges": {
            "get": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Get all challenges",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "Number"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["asc", "desc"],
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return all challenges",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "challenges": [
                                        {"$ref":"#/components/schemas/Challenge"},
                                        {"$ref":"#/components/schemas/Challenge"}
                                    ],
                                    "currentRows": 10,
                                    "totalRows": 515
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Create a challenges",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Create a new challenges",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "example": {
                                "name": "Le super challenge", 
                                "description": "description du super challenge", 
                                "max_attempts": 5, 
                                "value": 700, 
                                "category": {
                                    "$ref":"#/components/schemas/Category"
                                }, 
                                "type": "standard", 
                                "requirements": [
                                    {"$ref":"#/components/schemas/Challenge"},
                                    {"$ref":"#/components/schemas/Challenge"}
                                ],
                                "event": {
                                    "$ref":"#/components/schemas/Event"
                                },
                                "flag": "epitech",
                                "caseSensitivity": "case-sensitive",
                                "minimum": 300,
                                "decay": 25,
                                "func": "dynamic",
                                "files": "files"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Nom du challenge"
                                    }, 
                                    "description": {
                                        "type": "string",
                                        "description": "Description du challenge"
                                    }, 
                                    "max_attempts": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Nombre maximal de tentative d'un challenge par team/player",
                                        "default": 0
                                    }, 
                                    "value": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Les points du challenge"
                                    }, 
                                    "category": {
                                        "description": "Categorie du challenge",
                                        "type": "string"
                                    }, 
                                    "type": {
                                        "type": "string",
                                        "enum": ["standard", "dynamic"],
                                        "description": "Challenge standard ou dynamic",
                                        "default": "standard"
                                    }, 
                                    "requirements": {
                                        "type": "array",
                                        "items": {
                                            "type": "string", 
                                            "description": "ID of a required challenge"
                                        }
                                    },                                    
                                    "event": {
                                        "type": "string",
                                        "description": "Id de l'event auquel le challenge est lié sinon null",
                                        "default": null
                                    },
                                    "flag": {
                                        "type": "string",
                                        "description": "Le flag du challenge"
                                    },
                                    "caseSensitivity": {
                                        "type": "string",
                                        "description": "Si le flag est sensible à la casse ou non",
                                        "enum": ["case-sensitive", "case-insensitive"]
                                    },
                                    "minimum": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "La valeur maximale à laquelle ce challenge si dynamic peut descendre"
                                    },
                                    "decay": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "La valeur à diminuer des points de ce challenge si dynamic"
                                    },
                                    "func": {
                                        "type": "string",
                                        "description": "La fonction de diminution des points de ce challenge si dynamic",
                                        "enum": ["linear", "logarithmic"]
                                    },
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string", 
                                            "format": "binary"
                                        }
                                    }
                                },
                                "required": [
                                    "name", 
                                    "description", 
                                    "value", 
                                    "category", 
                                    "requirements",
                                    "flag",
                                    "minimum",
                                    "decay"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Challenge"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If data provided are not good",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Missing parameters ! You must provide a name, description, value, category, type and flag, ..."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If defined but not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Event not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/challenges/{id}": {
            "get": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Get challenge by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return a challenge",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "$ref":"#/components/schemas/Challenge"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If not authorized",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "message" : "You are not registered to the event of this challenge !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If forbidden",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "message" : "Event haven't started yet"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If challenge not found",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "message" : "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Update a challenge",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Update a challenges",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "example": {
                                "name": "Le super challenge", 
                                "description": "description du super challenge", 
                                "max_attempts": 5, 
                                "value": 700, 
                                "category": {
                                    "$ref":"#/components/schemas/Category"
                                }, 
                                "type": "standard", 
                                "requirements": [
                                    {"$ref":"#/components/schemas/Challenge"},
                                    {"$ref":"#/components/schemas/Challenge"}
                                ],
                                "event": {
                                    "$ref":"#/components/schemas/Event"
                                },
                                "flag": "epitech",
                                "caseSensitivity": "case-sensitive",
                                "minimum": 300,
                                "decay": 25,
                                "func": "dynamic",
                                "files": "files"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Nom du challenge"
                                    }, 
                                    "description": {
                                        "type": "string",
                                        "description": "Description du challenge"
                                    }, 
                                    "max_attempts": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Nombre maximal de tentative d'un challenge par team/player",
                                        "default": 0
                                    }, 
                                    "value": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "Les points du challenge"
                                    }, 
                                    "category": {
                                        "description": "Categorie du challenge",
                                        "type": "string"
                                    }, 
                                    "type": {
                                        "type": "string",
                                        "enum": ["standard", "dynamic"],
                                        "description": "Challenge standard ou dynamic",
                                        "default": "standard"
                                    }, 
                                    "requirements": {
                                        "type": "array",
                                        "items": {
                                            "type": "string", 
                                            "description": "ID of a required challenge"
                                        }
                                    },                                    
                                    "event": {
                                        "type": "string",
                                        "description": "Id de l'event auquel le challenge est lié sinon null",
                                        "default": null
                                    },
                                    "flag": {
                                        "type": "string",
                                        "description": "Le flag du challenge"
                                    },
                                    "caseSensitivity": {
                                        "type": "string",
                                        "description": "Si le flag est sensible à la casse ou non",
                                        "enum": ["case-sensitive", "case-insensitive"]
                                    },
                                    "minimum": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "La valeur maximale à laquelle ce challenge si dynamic peut descendre"
                                    },
                                    "decay": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "description": "La valeur à diminuer des points de ce challenge si dynamic"
                                    },
                                    "func": {
                                        "type": "string",
                                        "description": "La fonction de diminution des points de ce challenge si dynamic",
                                        "enum": ["linear", "logarithmic"]
                                    },
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string", 
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "$ref":"#/components/schemas/Challenge"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If data provided are not good",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Value must be higher than 0"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If challenge not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Not found"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Delete a challenge by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Return the deleted challenge",
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "$ref":"#/components/schemas/Challenge"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If challenge not found",
                        "content": {
                            "application/json": {
                                "example": 
                                {
                                    "message" : "Not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/challenges/{id}/flag": {
            "put": {
                "tags": [
                    "Challenges"
                ],
                "summary": "Update a challenge",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Update a challenge",
                "requestBody": {
                    "description": "Corps de la requête",
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "flag": "epitechbj",
                                "caseSensitivity": "case-sensitive"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "flag": {
                                        "type": "string",
                                        "required": true
                                    },
                                    "caseSensitivity": {
                                        "type": "string",
                                        "required": false
                                    }
                                },
                                "required": ["flag"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "message": "Flag updated successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If flag not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Flag not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/challenges/{id}/solvers": {
            "get": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Get a submission's solvers",
                "security": [
                    {
                        "JWTBearer": []
                    }
                ],
                "description": "Get a submissions solvers by giving submission's id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succès",
                        "content": {
                            "application/json": {
                                "example": {
                                    "solvers": [
                                        {
                                            "$ref":"#/components/schemas/User"
                                        },
                                        {
                                            "$ref":"#/components/schemas/User"
                                        }
                                    ],
                                    "currentRows":13,
                                    "totalRows":515   
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If user is not registered",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You're not allowed to do this because you're not registered on this challenge's event !"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user is not registered on a team",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "You must be in a team before try this."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If submission not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Challenge not found"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "description": "(UNIQUE) : Nom de l'utilisateur",
                            "minLength": 4
                        },
                        "email": {
                            "type": "string",
                            "format": "email",
                            "pattern": "^[a-z0-9._-]+@[a-z0-9._-]{2,}\\.[a-z]{2,10}$",
                            "description": "(UNIQUE) : Adresse e-mail de l'utilisateur"
                        },
                        "password": {
                            "type": "string",
                            "minLength": 8,
                            "description": "Mot de passe de l'utilisateur"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "user"
                            ],
                            "default": "user",
                            "description": "Type de l'utilisateur"
                        },
                        "isStudent": {
                            "type": "string",
                            "enum": [
                                "yes",
                                "no"
                            ],
                            "default": "yes",
                            "description": "Si l'utilisateur est un étudiant ou un professionnel"
                        },
                        "school": {
                            "type": "string",
                            "default": null,
                            "$ref": "#/components/schemas/School",                        
                            "description": "Ecole si étudiant (NB: Envoyez jsute le nom de l'école, pas l'id)",
                            "example": "EPITECH Bénin"
                        },
                        "country": {
                            "type": "string",
                            "description": "Pays",
                            "example": "Bénin"
                        },
                        "enable": {
                            "type": "string",
                            "enum": ["enabled", "disabled"],
                            "default": "enabled",
                            "description": "Statut de l'utilisateur: compte activé ou désactivé ?"
                        },
                        "active": {
                            "type": "string",
                            "enum": ["yes", "no"],
                            "default": "no",
                            "description": "Vérification du mail de l'utilisateur"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource",
                            "example": "timestamp"
                        }
                    }
                },
                "required": ["name", "email", "password", "country", "isStudent"]
            },
            "School": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "description": "(UNIQUE) : Nom de l'école",
                            "example":"EPITECH Bénin"
                        },
                        "picture": {
                            "type": "string",
                            "default": null,
                            "description": "(PAS PRIS EN COMPTE POUR LE MOMENT) : Image de la ressource"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name"]
            },        
            "Category": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Web exploitation",
                            "description": "(UNIQUE) : Nom de la catégorie"
                        },
                        "description": {
                            "type": "string",
                            "default": null,
                            "description": "Description de la category"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name"]
            },
            "Event": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"#H4CkTHeb0X",
                            "description": "(UNIQUE) : Nom de la catégorie"
                        },
                        "description": {
                            "type": "string",
                            "description": "Description de l'event de CTF"
                        },
                        "isSolo": {
                            "type": "string",
                            "description": "Nom de la catégorie",
                            "enum": ["solo", "team"]
                        },
                        "minTeamSize": {
                            "type": "Number",
                            "default": 0,
                            "min":0,
                            "description": "Le nombre minimal de personne dans chaque équipe"
                        },
                        "maxTeamSize": {
                            "type": "Number",
                            "default": 0,
                            "min":0,
                            "description": "Le nombre maximal de personne dans chaque équipe"
                        },
                        "scope": {
                            "type": "string",
                            "description": "Nom de la catégorie",
                            "enum": [
                                "national",
                                "international",
                                "special EPITECH",
                                "interschool",
                                "open"
                            ],
                            "default": "open"
                        },
                        "startDate": {
                            "type": "Date",
                            "min": "Date.now()",
                            "description": "Le nombre maximal de personne dans chaque équipe"
                        },
                        "endDate": {
                            "type": "Date",
                            "min": "Date.now()",
                            "description": "Le nombre maximal de personne dans chaque équipe"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name", "description", "isSolo", "startDate", "endDate"]
            },
            "Challenge": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Find the flag",
                            "description": "Nom du challenge"
                        },
                        "description": {
                            "type": "string",
                            "description": "Description du challenge"
                        },
                        "max_attempts": {
                            "type": "Number",
                            "example": 5,
                            "default": 0,
                            "min": 0,
                            "description": "Nombre maximal de tentative d'un challenge"
                        },
                        "value": {
                            "type": "Number",
                            "example": 120,
                            "min": 0,
                            "description": "Point que ramène un challenge"
                        },
                        "category": {
                            "type": "string",
                            "$ref": "#/components/schemas/Category",
                            "description": "(Envoyer l'ID) Category du challenge"
                        },
                        "type": {
                            "type": "string",
                            "description": "Type du challenge",
                            "enum": ["standard", "dynamic"],
                            "default": "standard"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "(Id de l'event) Event auquel appartient le challenge; null s'il n'est dans aucun event"
                        },
                        "requirements": {
                            "type": "array",
                            "example":"Find the flag",
                            "description": "Tableau d'id des challenges a résoudre avant de débloquer celui-ci"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": [
                    "name",
                    "description",
                    "value",
                    "category",
                    "type"
                ]
            },
            "Team": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "name": {
                            "type": "string",
                            "example":"Excelsior",
                            "description": "Nom de la team"
                        },
                        "picture": {
                            "type": "string",
                            "default": null,
                            "description": "(PAS PRIS EN COMPTE POUR LE MOMENT) : Image de la ressource"
                        },
                        "captain": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Capitaine de l'équipe (par défaut le créateur de l'équipe sauf si c'est l'admin qui le crée, auquel cas, il doit fournir le capitaine)"
                        },
                        "users": {
                            "type": "array",
                            "default": null,
                            "$ref": "#/components/schemas/User",
                            "description": "Tableau d'ids des users qui sont dans l'équipe"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "Evènement pour lequel l'équipe a été créée"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["name", "captain", "event"]
            },
            "Submission": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "challenge": {
                            "type": "string",
                            "$ref": "#/components/schemas/Challenge",
                            "description": "Le challenge pour lequel la soumission a été faite"
                        },
                        "user": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Auteur de la soumission"
                        },
                        "team": {
                            "type": "string",
                            "$ref": "#/components/schemas/Team",
                            "default": null,
                            "description": "Team de l'auteur de la soumission, si le challenge est en équipe"
                        },
                        "event": {
                            "type": "string",
                            "$ref": "#/components/schemas/Event",
                            "description": "Event du challenge, si le challenge est dans un event"
                        },
                        "writeUp": {
                            "type": "string",
                            "description": "writeUp qui a été fourni durant soumission"
                        },
                        "isCorrect": {
                            "type": "string",
                            "description": "Détermine si le flag envoyé est correct ou pas",
                            "enum": ["incorrect", "correct"],
                            "default": "incorrect"
                        },
                        "isValidate": {
                            "type": "string",
                            "description": "Détermine si le flag correct envoyé a été validé par l'admin ou pas",
                            "enum": ["pending", "validated", "refused"],
                            "default": "pending"
                        },
                        "adminComments": {
                            "type": "string",
                            "$ref": "#/components/schemas/User",
                            "description": "Auteur de la soumission"
                        },
                        "timestamps": {
                            "type": "string",
                            "description": "Timestamp de la ressource"
                        }
                    }
                },
                "required": ["challenge", "user", "writeUp"]
            },
            "Notification": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Identifiant auto-généré par mongoose"
                        },
                        "title": {
                            "type": "string",
                            "example":"Un nouvel event est lancé",
                            "description": "Notif content"
                        },
                        "content": {
                            "type": "string",
                            "example":"Allez vous inscrire",
                            "description": "Notif content"
                        },
                        "viewers": {
                            "type": "array",
                            "default": [],
                            "description": "Content ids of those who see it"
                        }
                    }
                },
                "required": ["title", "content"]
            }
        },
        "securitySchemes": {
            "JWTBearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Token de connexion obtenu après la connexion"
            }
        }        
    }
}